# We will create an empty dataframe to store our output in...
size = 10
index<-c(1:10000)
DATA<-data.frame(index)
DATA$sd<-NULL
DATA$var<-NULL
DATA$mean <- NULL
DATA$median <- NULL
# We will create an empty dataframe to store our output in...
X <- c(1:20)
set.seed(123)
# This is the meat of the script, this for loop will create random samples
# (based on the index you specified above)
for (i in 1:length(DATA$index)) {
s1 <- sample(X, size, replace = FALSE, prob = NULL)
DATA$sd[i] = sd(s1)
DATA$var[i] = var(s1)
DATA$mean[i]<-mean(s1)
DATA$median[i]<-median(s1)
}
ggplot(data=DATA, mapping = aes(x = mean)) +
geom_histogram(fill="#b2df8a", col="black", alpha=0.8) +
scale_x_continuous(name = "Sample Means", limits=c(-0.5,0.5)) +
dark_theme_gray() +
theme(plot.title=element_text(size=15,
face="bold",
hjust=0.5,
lineheight=1.2),  # title
plot.background = element_rect(fill="grey10"),
panel.background = element_rect(fill="grey20"),
plot.caption=element_text(size=16, face = "bold"),  # caption
strip.text = element_text(size=16),
axis.title.x=element_text(size=16, face = "bold"),  # X axis title
axis.title.y=element_text(size=16, face = "bold"),  # Y axis title
axis.text.x=element_text(size=16),  # X axis title
axis.text.y=element_text(size=16),  # Y axis title
legend.position = "none")
library("tidyverse"); library("ggdark")
ggplot(data=DATA, mapping = aes(x = mean)) +
geom_histogram(fill="#b2df8a", col="black", alpha=0.8) +
scale_x_continuous(name = "Sample Means", limits=c(-0.5,0.5)) +
dark_theme_gray() +
theme(plot.title=element_text(size=15,
face="bold",
hjust=0.5,
lineheight=1.2),  # title
plot.background = element_rect(fill="grey10"),
panel.background = element_rect(fill="grey20"),
plot.caption=element_text(size=16, face = "bold"),  # caption
strip.text = element_text(size=16),
axis.title.x=element_text(size=16, face = "bold"),  # X axis title
axis.title.y=element_text(size=16, face = "bold"),  # Y axis title
axis.text.x=element_text(size=16),  # X axis title
axis.text.y=element_text(size=16),  # Y axis title
legend.position = "none")
ggplot(data=DATA, mapping = aes(x = mean)) +
geom_histogram(fill="#b2df8a", col="black", alpha=0.8) +
scale_x_continuous(name = "Sammple Means (N=10)") +
dark_theme_gray() +
theme(plot.title=element_text(size=15,
face="bold",
hjust=0.5,
lineheight=1.2),  # title
plot.background = element_rect(fill="grey10"),
panel.background = element_rect(fill="grey20"),
plot.caption=element_text(size=16, face = "bold"),  # caption
strip.text = element_text(size=16),
axis.title.x=element_text(size=16, face = "bold"),  # X axis title
axis.title.y=element_text(size=16, face = "bold"),  # Y axis title
axis.text.x=element_text(size=16),  # X axis title
axis.text.y=element_text(size=16),  # Y axis title
legend.position = "none")
ggplot(data=DATA, mapping = aes(x = mean)) +
geom_histogram(fill="#b2df8a", col="black", alpha=0.8, binwidth = 0.5) +
scale_x_continuous(name = "Sammple Means (N=10)") +
dark_theme_gray() +
theme(plot.title=element_text(size=15,
face="bold",
hjust=0.5,
lineheight=1.2),  # title
plot.background = element_rect(fill="grey10"),
panel.background = element_rect(fill="grey20"),
plot.caption=element_text(size=16, face = "bold"),  # caption
strip.text = element_text(size=16),
axis.title.x=element_text(size=16, face = "bold"),  # X axis title
axis.title.y=element_text(size=16, face = "bold"),  # Y axis title
axis.text.x=element_text(size=16),  # X axis title
axis.text.y=element_text(size=16),  # Y axis title
legend.position = "none")
library(lme4); library (ICC); library(psych); library(lmerTest)
library(car); library(tidyverse);
setwd("~/GitHub/spectral_slopes_reliability")
# Multilevel models for LMER slopes versus FOOOF -------------------------------
DATA3 <- read.csv("./data_EEG_COMB25_11182020.csv",
header = TRUE,na.strings=c("","NA","na"),
stringsAsFactors = TRUE)
head(DATA3)
# Make the FOOOF exponents negative to match the spectral slopes:
DATA3 <- DATA3 %>% mutate(slope_frontal = -slope_frontal,
slope_central = -slope_central,
slope_parietal = -slope_parietal,
slope_occipital = -slope_occipital)
PRAC_wide <-subset(DATA3, time == "prac")
head(PRAC_wide)
SLOPES_WIDE<-PRAC_wide %>% select(-c("intercept_frontal", "intercept_central", "intercept_parietal",
"intercept_occipital", "offset_frontal", "offset_central",
"offset_parietal", "offset_occipital"))
head(SLOPES_WIDE)
SLOPES_LONG <-gather(data = SLOPES_WIDE, key = method, value = slopes, c("lgHz_frontal", "lgHz_central", "lgHz_parietal", "lgHz_occipital",
"slope_frontal", "slope_central", "slope_parietal", "slope_occipital"))
head(SLOPES_LONG)
INT_WIDE<-select(PRAC_wide, c("subID", "block", "intercept_frontal", "intercept_central", "intercept_parietal",
"intercept_occipital", "offset_frontal", "offset_central",
"offset_parietal", "offset_occipital"))
head(INT_WIDE)
INT_LONG <-gather(data = INT_WIDE, key = method, value = ints, c("intercept_frontal", "intercept_central", "intercept_parietal",
"intercept_occipital", "offset_frontal", "offset_central",
"offset_parietal", "offset_occipital"))
head(INT_LONG)
SLOPES_LONG$ints<-INT_LONG$ints
head(SLOPES_LONG)
# Splitting the "method" string into region and method variables:
SLOPES_LONG <- SLOPES_LONG %>% separate(col=method,
into = c("method","region"),
sep = "_")
head(SLOPES_LONG)
summary(SLOPES_LONG$method)
SLOPES_LONG$method <- fct_recode(SLOPES_LONG$method, FOOOF = "slope", LMER = "lgHz")
SLOPES_LONG$method <- fct_relevel(SLOPES_LONG$method, "LMER", "FOOOF")
SLOPES_LONG <- SLOPES_LONG %>% arrange(subID, block)
write.csv(SLOPES_LONG, "./data_PRAC_long.csv")
data_PRAC_long1 <-subset(SLOPES_LONG, subID != "NA")
write.csv(data_PRAC_long1, "data_PRAC_long1.csv")
#### LMER model for PRAC -------------------------------
DATA <- read.csv("./data_PRAC_long1.csv",
header = TRUE,na.strings=c("","NA","na"),
stringsAsFactors = TRUE)
head(DATA)
DATA$method.c<-(as.numeric(DATA$method)-1.5)*(-1) ## convert method to numerical
DATA$blocknum <-as.numeric(as.character(substr(DATA$block, 2, 3)))
summary(DATA$blocknum)
DATA$block.c<-DATA$blocknum-mean(DATA$blocknum)
head(DATA)
DATA$diff.c <- DATA$diff - mean(DATA$diff)
# Overall LMER Model -----------------------------------------------------------
M1 <- lmer(slopes ~ 1+ block.c*diff.c*method*region+
(1|subID)+(1|subID:method)+(1|subID:region),
data = DATA, REML = FALSE)
Anova(M1, type="III")
summary(M1)
Anova(M1, type="III")
FRONTAL <- subset(DATA, region == "frontal")
head(FRONTAL)
Fron_mod <- lmer(slopes ~ 1+ block.c*method+diff.c*method+
(1+block.c+diff.c+method|subID),
data = FRONTAL, REML = FALSE,
control=lmerControl(optimizer="bobyqa",
optCtrl=list(maxfun=5e5)))
Anova(Fron_mod, type="III")
# Post hoc tests for LMER method for central channels --------------------------
CENTRAL <- subset(DATA, region == "central")
head(CENTRAL)
Cent_mod <- lmer(slopes ~ 1+ block.c*method+diff.c*method+
(1+block.c+diff.c+method|subID),
data = CENTRAL, REML = FALSE,
control=lmerControl(optimizer="bobyqa",
optCtrl=list(maxfun=5e5)))
Anova(Cent_mod, type="III")
# Post hoc tests for LMER method for parietal channels --------------------------
PARIETAL <- subset(DATA, region == "parietal")
head(PARIETAL)
Par_mod <- lmer(slopes ~ 1+ block.c*method+diff.c*method+
(1+block.c+diff.c+method|subID),
data = PARIETAL, REML = FALSE,
control=lmerControl(optimizer="bobyqa",
optCtrl=list(maxfun=5e5)))
Anova(Par_mod, type="III")
# Post hoc tests for LMER method for occipital channels --------------------------
OCCIPITAL <- subset(DATA, region == "occipital")
head(OCCIPITAL)
Occ_mod <- lmer(slopes ~ 1+ block.c*method+diff.c*method+
(1+block.c+diff.c+method|subID),
data = OCCIPITAL, REML = FALSE,
control=lmerControl(optimizer="bobyqa",
optCtrl=list(maxfun=5e5)))
Anova(Occ_mod, type="III")
summary(Occ_mod)
Anova(Occ_mod, type="III")
# Figure 5 ---------------------------------------------------------------------
head(DATA)
DATA$region <- fct_recode(DATA$region, Frontal = "frontal", Central = "central",
Parietal = "parietal", Occipital = "occipital")
DATA$region <- fct_relevel(DATA$region, "Frontal", "Central", "Parietal", "Occipital")
# Figure 5A: LMER Slopes by Block and Region
DAT2 <- DATA %>% filter(method=="LMER") %>%
group_by(region, block) %>%
summarize(blocknum = blocknum[1],
mean_slope = mean(slopes))
head(DAT2)
ggplot(DAT2, aes(x = blocknum, y = mean_slope)) +
geom_line(aes(col=region, lty=region), lwd=1)+
scale_x_continuous(name = "Block of Practice", limits=c(0,20)) +
scale_y_continuous(name = "Mean Spectral Slope", limits=c(-1.8, -1.0)) +
theme_bw() + labs(col="Region", lty="Region")+
theme(axis.text=element_text(size=16, colour="black"),
axis.title=element_text(size=16, colour="black", face="bold"),
strip.text.x = element_text(size = 16),
legend.text=element_text(size=16, color="black"),
legend.title=element_text(size=16, face="bold"),
legend.position = "bottom")
# Figure 5B: LMER Slopes by Difficulty and Region
DAT3 <- DATA %>% filter(method=="LMER") %>%
group_by(region, diff) %>%
summarize(mean_slope = mean(slopes))
head(DAT3)
ggplot(DAT3, aes(x = diff, y = mean_slope)) +
geom_line(aes(col=region, lty=region), lwd=1)+
scale_x_continuous(name = "Difficulty of Practice", breaks=c(0:9)) +
scale_y_continuous(name = "Mean Spectral Slope", limits=c(-1.8, -1.0)) +
theme_bw() + labs(col="Region", lty="Region")+
theme(axis.text=element_text(size=16, colour="black"),
axis.title=element_text(size=16, colour="black", face="bold"),
strip.text.x = element_text(size = 16),
legend.text=element_text(size=16, color="black"),
legend.title=element_text(size=16, face="bold"),
legend.position = "bottom")
# Figure 5C: FOOOF Slopes by Block and Region
DAT4 <- DATA %>% filter(method=="FOOOF") %>%
group_by(region, block) %>%
summarize(blocknum = blocknum[1],
mean_slope = mean(slopes))
head(DAT4)
ggplot(DAT4, aes(x = blocknum, y = mean_slope)) +
geom_line(aes(col=region, lty=region), lwd=1)+
scale_x_continuous(name = "Block of Practice", limits=c(0,20)) +
scale_y_continuous(name = "Mean Aperiodic Slope", limits=c(-1.8, -1.0)) +
theme_bw() + labs(col="Region", lty="Region")+
theme(axis.text=element_text(size=16, colour="black"),
axis.title=element_text(size=16, colour="black", face="bold"),
strip.text.x = element_text(size = 16),
legend.text=element_text(size=16, color="black"),
legend.title=element_text(size=16, face="bold"),
legend.position = "bottom")
# Figure 5D: FOOOF Slopes by Difficulty and Region
DAT5 <- DATA %>% filter(method=="FOOOF") %>%
group_by(region, diff) %>%
summarize(mean_slope = mean(slopes))
head(DAT5)
ggplot(DAT5, aes(x = diff, y = mean_slope)) +
geom_line(aes(col=region, lty=region), lwd=1)+
scale_x_continuous(name = "Difficulty of Practice", breaks=c(0:9)) +
scale_y_continuous(name = "Mean Aperiodic Slope", limits=c(-1.8, -1.0)) +
theme_bw() + labs(col="Region", lty="Region")+
theme(axis.text=element_text(size=16, colour="black"),
axis.title=element_text(size=16, colour="black", face="bold"),
strip.text.x = element_text(size = 16),
legend.text=element_text(size=16, color="black"),
legend.title=element_text(size=16, face="bold"),
legend.position = "bottom")
# Analysis of the Agreement between Spectral and Aperiodic slopes during the Task
head(DATA)
DAT6 <- DATA %>% group_by(subID, method, region) %>%
summarize(mean_slope = mean(slopes))
head(DAT6)
table(DAT6$method, DAT6$subID)
DAT7<-spread(data = DAT6, key = method, value=mean_slope)
ggplot(DAT7, aes(x = FOOOF, y = LMER)) +
geom_point(aes(col=region), pch=21, size=2) +
stat_smooth(aes(col=region), method="lm", lwd=0.5)+
facet_wrap(~region) +
scale_x_continuous(name = "Aperiodic Slope (FOOOF)") +
scale_y_continuous(name = "Spectral Slope (LMER)") +
theme_bw() + labs(col="Region", lty="Region")+
theme(axis.text=element_text(size=16, colour="black"),
axis.title=element_text(size=16, colour="black", face="bold"),
strip.text.x = element_text(size = 16),
legend.text=element_text(size=16, color="black"),
legend.title=element_text(size=16, face="bold"),
legend.position = "none")
# ICCs between FOOOF and LMER for Resting data ----
DAT8 <- read.csv("./data_EEG_COMB25_11182020.csv",
header = TRUE, na.strings=c("","NA","na"),
stringsAsFactors = TRUE)
head(DAT8)
# Make the FOOOF exponents negative to match the spectral slopes:
DAT8 <- DAT8 %>% mutate(slope_frontal = -slope_frontal,
slope_central = -slope_central,
slope_parietal = -slope_parietal,
slope_occipital = -slope_occipital)
head(DAT8)
REST <- DAT8 %>% filter(time=="rest") %>%
select(subID, lgHz_frontal, slope_frontal, lgHz_central, slope_central,
lgHz_parietal, slope_parietal, lgHz_occipital, slope_occipital) %>%
group_by(subID) %>%
summarize(lgHz_frontal=mean(lgHz_frontal),
slope_frontal=mean(slope_frontal),
lgHz_central=mean(lgHz_central),
slope_central=mean(slope_central),
lgHz_parietal=mean(lgHz_parietal),
slope_parietal=mean(slope_parietal),
lgHz_occipital=mean(lgHz_occipital),
slope_occipital=mean(slope_occipital)
)
head(REST)
REST_LONG <-gather(data = REST, key = method, value = slopes, c("lgHz_frontal", "lgHz_central", "lgHz_parietal", "lgHz_occipital",
"slope_frontal", "slope_central", "slope_parietal", "slope_occipital"))
head(REST_LONG)
# Splitting the "method" string into region and method variables:
REST_LONG <- REST_LONG %>% separate(col=method,
into = c("method","region"),
sep = "_")
head(REST_LONG)
REST_LONG$region <- fct_recode(REST_LONG$region, Frontal = "frontal", Central = "central",
Parietal = "parietal", Occipital = "occipital")
REST_LONG$region <- fct_relevel(REST_LONG$region, "Frontal", "Central", "Parietal", "Occipital")
REST_LONG$method <- fct_recode(REST_LONG$method, FOOOF = "slope", LMER = "lgHz")
REST_LONG$method <- fct_relevel(REST_LONG$method, "LMER", "FOOOF")
head(REST_LONG)
REST_LONG<-spread(data = REST_LONG, key = method, value=slopes)
head(REST_LONG)
ggplot(REST_LONG, aes(x = FOOOF, y = LMER)) +
geom_point(aes(col=region), pch=21, size=2) +
stat_smooth(aes(col=region), method="lm", lwd=0.5)+
facet_wrap(~region) +
scale_x_continuous(name = "Aperiodic Slope (FOOOF)") +
scale_y_continuous(name = "Spectral Slope (LMER)") +
theme_bw() + labs(col="Region", lty="Region")+
theme(axis.text=element_text(size=16, colour="black"),
axis.title=element_text(size=16, colour="black", face="bold"),
strip.text.x = element_text(size = 16),
legend.text=element_text(size=16, color="black"),
legend.title=element_text(size=16, face="bold"),
legend.position = "none")
ICC(DAT7[DAT7$region=="Frontal", c("FOOOF", "LMER")], missing=TRUE,alpha=.05,lmer=TRUE,check.keys=FALSE)
ICC(DAT7[DAT7$region=="Central", c("FOOOF", "LMER")], missing=TRUE,alpha=.05,lmer=TRUE,check.keys=FALSE)
ICC(DAT7[DAT7$region=="Parietal", c("FOOOF", "LMER")], missing=TRUE,alpha=.05,lmer=TRUE,check.keys=FALSE)
ICC(DAT7[DAT7$region=="Occipital", c("FOOOF", "LMER")], missing=TRUE,alpha=.05,lmer=TRUE,check.keys=FALSE)
head(DAT6)
# Analysis of the Agreement between Spectral and Aperiodic slopes during the Task
head(DATA)
ICC(DAT7[DAT7$region=="Parietal", c("FOOOF", "LMER")], missing=TRUE,alpha=.05,lmer=TRUE,check.keys=FALSE)
ICC(DAT7[DAT7$region=="Occipital", c("FOOOF", "LMER")], missing=TRUE,alpha=.05,lmer=TRUE,check.keys=FALSE)
ICC(REST_LONG[REST_LONG$region=="Frontal", c("FOOOF", "LMER")], missing=TRUE,alpha=.05,lmer=TRUE,check.keys=FALSE)
ICC(REST_LONG[REST_LONG$region=="Central", c("FOOOF", "LMER")], missing=TRUE,alpha=.05,lmer=TRUE,check.keys=FALSE)
ICC(REST_LONG[REST_LONG$region=="Parietal", c("FOOOF", "LMER")], missing=TRUE,alpha=.05,lmer=TRUE,check.keys=FALSE)
ICC(REST_LONG[REST_LONG$region=="Occipital", c("FOOOF", "LMER")], missing=TRUE,alpha=.05,lmer=TRUE,check.keys=FALSE)
ICC(REST_LONG[REST_LONG$region=="Occipital", c("FOOOF", "LMER")], missing=TRUE,alpha=.05,lmer=TRUE,check.keys=FALSE)
